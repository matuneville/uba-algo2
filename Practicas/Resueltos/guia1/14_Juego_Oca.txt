Ejercicio 14       simbolos × ➔ ∀ ≡ ∈ π ∧ ∨ ⇔ •

Especifique el juego de la oca.
Dos jugadores, alternadamente, se mueven por un camino de baldosas, numeradas ´estas 0, 1, 2, . . . avanzando
en cada turno tantas baldosas como indique el dado tirado y realizando la acci´on que indica el tablero para la
baldosa alcanzada. Van jugando de a uno por vez.
El tablero indica que ambos jugadores comienzan en la baldosa cero, el n´umero de la baldosa en donde est´a la
llegada (que debe ser distinto del de partida) y c´omo debe moverse un jugador cuando llega a una determinada
baldosa: cu´antas baldosas avanzar o retroceder, o no hacer nada (en los dem´as casos). La acci´on correspondiente
a una baldosa s´olo se toma si se llega a esa avanzando con el dado, no si se llega mediante la acci´on de otra
baldosa. Gana el primer jugador que alcanza la llegada. Proveer tambi´en funciones para saber qu´e indic´o el dado
en cada jugada para cada uno de los jugadores, y para saber si un jugador pas´o por una baldosa determinada.


TAD TABLERO:
    Generos
        tablero 
    Exporta
        tablero, Observadores, Generadores
    Usa
        nat, bool

    Igualdad observacional
        (∀ t1, t2: tablero)(∀ n: nat)
        (t1 =obs t2)  ⇔  (#baldosas(t1) = #baldosas(t2)  ∧  avanza?(t1, n) = avanza?(t2, n)  ∧  #moverse(t1, n) = #moverse(t2, n))

    Observadores basicos
        #baldosas:  tablero ➔ nat
        avanza?:  tablero t × nat n ➔ bool                         {n <= #baldosas(t)}
        #moverse:  tablero t × nat n ➔ nat                         {n <= #baldosas(t)}
    
    Generadores
        crearTablero: secu(tupla{bool, nat}) ➔ tablero

    Axiomas
        (∀ t: tablero)(∀ n: nat)(∀ s: secu(tupla{bool, nat}))

        #baldosas(crearTablero(s)) ≡  largo(s)
        avanza?(crearTablero(s), n) ≡  π1.s[n]
        #moverse(crearTablero(s), n) ≡  π2.s[n]

FIN TAD


TAD OCA:
    Generos
        oca 
    Exporta
        oca, Observadores, Generadores
    Usa
        nat, Tablero, bool, tupla

    Igualdad observacional
        (∀ o1, o2: oca)
        (o1 =obs o2)  ⇔  (tablero(o1) = tablero(o2)  ∧  historialDados(o1) = historialDados(o2))

    Observadores basicos
        tablero:  oca ➔ tablero
        historialDados: oca ➔ secu(tupla{nat, nat})

    Generadores
        crearJuego:  tablero ➔ oca
        avanzar:  oca × nat n ➔ oca                                {1 <= n <= 6}
        accionTablero: tablero t × nat n × oca ➔ oca               {n < #baldosas(t)}

    Otras operaciones
        pasoCasilla?:  oca o × nat n × nat j × secu(tupla{nat, nat}) ➔ bool         {n < #baldosas(tablero(o)),  j ∈ {1,2}}
        turnoDeJ?: oca × nat j ➔ bool                                              {j ∈ {1,2}}

    Axiomas
        (∀ o: oca)(∀ n,j: nat)(∀ t: tablero)(∀ s: secu(tupla{nat,nat}))

        tablero(crearJuego(t)) ≡ t
        tablero(avanzar(o, n)) ≡ tablero(o)
        tablero(accionTablero(t, n, o)) ≡ t
                                            
        historialDados(crearJuego(t)) ≡ ()
        historialDados(avanzar(o, n)) ≡ if  turnoDeJ?(o, 1)  then  {n, π2.ult(historialDados(o))} • historialDados(o)
                                        else  {π1.ult(historialDados(o)), n} • historialDados(o)
                                        fi
        historialDados(accionTablero(t, n, o)) ≡ historialDados(o)

        pasoCasilla?(o, n, j, casillasPasadas()) ≡  if j=1  then
                                                        if  vacia?(casillasPasadas(o)) then false
                                                        else
                                                            if  n = π1.prim(historialDados(o)) then true
                                                            else  pasoCasilla?(o, n, j, fin(casillasPasadas()))
                                                            fi
                                                        fi
                                                    else
                                                        if  vacia?(casillasPasadas(o)) then false
                                                        else
                                                            if  n = π2.prim(historialDados(o)) then true
                                                            else  pasoCasilla?(o, n, j, fin(casillasPasadas()))
                                                            fi
                                                        fi
                                                    fi

        turnoDeJ?(o, j) ≡  if  (largo(historialDados(o)) mod 2 = 0)  then 1
                           else  2
                           fi
        
        casillasPasadas(o, historialDados(o)) ≡

FIN TAD